#include <iostream>
#include <string>
#include <termios.h>			//uncomment this for Linux
#include <unistd.h>			//uncomment this for Linux
#include <ctype.h>
//#include <Windows.h>			//uncomment this for Win
#include <fstream>
#include <algorithm>
#include <sstream>


using namespace std;

unsigned char s_box[256] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned char mul_2[256] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
};

unsigned char mul_3[256] = {
	0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
};

unsigned char rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 }; 

string get_dst_filepath(string src_f);						//appends the string passed to it with ".enc"
unsigned char* get_key();												//reads the user input 
void Encrypt(string path, unsigned char* key);
void key_expansion_core(unsigned char* in, unsigned char i);
void key_expansion(unsigned char* input_key, unsigned char* expanded_key);
void sub_bytes(unsigned char* f_buf);
void shift_rows(unsigned char* f_buf);
void mix_columns(unsigned char* f_buf);
void key_add(unsigned char* f_buf, unsigned char* key);




int main(int argc, char** argv) {

	string scr_filepath = argv[1];									//filepath passed throug command lien
	//string dst_filepath = get_dst_filepath(scr_filepath);			//destination filepath
	//unsigned char* key = get_key();	
	
	ifstream src_file_descriptor(scr_filepath);//, ios::in, ios::binary);			//open plaintext file (only read)

	//string dst_filepath = get_dst_filepath(path);						//destination filepath
	//ofstream dst_file_descriptor(dst_filepath, ios::out | ios::binary | ios::app);	//open/create ciphertext file (write only)

	string f_buffer = "";	
								//saves user key
	//src_file_descriptor.read(f_buffer, 16);
	
	for(int i = 0; !src_file_descriptor.eof(); i++){
		char c ;
		src_file_descriptor >> c;
	//	f_buffer.append(src_file_descriptor.gets(f_buffer,16));
		f_buffer += c;	
	//	cout << f_buffer[i];
	//
		//cout << endl;
		if(i % 15 == 0 && i != 0){
			for(int j = 0; j < f_buffer.size(); j++)
				cout << f_buffer[j];
			cout << endl;
			f_buffer = "";
			i = -1;
			Encrypt(f_buffer, key)
		}
	
	}
	if(f_buffer.size()>0){
		for(int i=f_buffer.size(); i< 16; i++){
			f_buffer +='0';
		
		}
		for(int j = 0; j < f_buffer.size(); j++)
	                cout << f_buffer[j];
                cout << endl;
		Encrypt(f_buffer,key);
	
	}
	//Encrypt(scr_filepath, key);

	//cout << scr_filepath << dst_filepath<<key<< endl;
	system("PAUSE");
	return 0;
}


//unsigned char * get_key(){
///*	
// *	Use this block if compiling in Win
// *
// *	HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
//	DWORD mode = 0;
//	GetConsoleMode(hStdin, &mode);
//	SetConsoleMode(hStdin, mode & (~ENABLE_ECHO_INPUT));
//	
//	string temp;
//	cout << "Enter the key: ";
//	getline(cin,temp);
//	
//	bool check = true;
//	while (check) {
//		if (count_if(temp.begin(), temp.end(), isalnum) == temp.size()) {
//			check = false;
//		}
//		else {
//			cout << "Wrong key. Enter again :";
//			getline(cin, temp);
//		}
//	}
//	SetConsoleMode(hStdin, mode);
//	
//	unsigned char* s = new unsigned char[temp.length()];
//	for (int i = 0; i < temp.length()-1; i++) {
//		s[i] = temp[i];
//	}
//	return s;
//*/
//// Use this block if compiling in Linux
//	termios oldt;
//	tcgetattr(STDIN_FILENO, &oldt);
//	termios newt = oldt;
//	newt.c_lflag &= ~ECHO;
//	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
//
//	string temp;
//	cout << "Enter the key: ";
//        getline(cin,temp);
//
//        bool check = true;
//        while (check) {
//                if (count_if(temp.begin(), temp.end(), isalnum) == temp.size()) {
//                        check = false;
//                }
//                else {
//                        cout << "Wrong key. Enter again :";
//                        getline(cin, temp);
//                }
//        }
//	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
//	        unsigned char* s = new unsigned char[temp.length()];
//        for (int i = 0; i < temp.length()-1; i++) {
//                s[i] = temp[i];
//        }
//        return s;
//
//}
//
//void Encrypt(string path, unsigned char* key) {
//
//	unsigned char* key_schedule[11];
//	unsigned char expanded_key[176];
//
//	key_schedule[0] = key;
//	for (int i = 1; i < 11; i++) {
//		key_schedule[i] = key_expansion(key_schedule[i - 1], expanded_key);
//	}
//	ifstream src_file_descriptor(path, ios::in, ios::binary);			//open plaintext file (only read)
//
//	string dst_filepath = get_dst_filepath(path);						//destination filepath
//	ofstream dst_file_descriptor(dst_filepath, ios::out | ios::binary | ios::app);	//open/create ciphertext file (write only)
//
//	unsigned char f_buffer[16];
//	//fill_n(f_buffer, 16, '\0');
//	src_file_descriptor.read((char*)f_buffer, 16);
//	for(int i = 0; i < 16; i++)
//		cout << f_buffer[i] << " ";
//	cout << endl;
//
//	//for (int i = 0; i < 16; i++) {
//	//	f_buffer[i] = src_file_descriptor[i];
//	//}
//
//	////////////////////////////////////////////////////////
//	int original_len = strlen((const char*)f_buffer);
//	int len_of_padded_mess = original_len;
//
//	if ((len_of_padded_mess % 16) != 0) {
//		len_of_padded_mess = (len_of_padded_mess / 16 + 1) * 16;
//	}
//
//	unsigned char* padded_mess = new unsigned char[len_of_padded_mess];
//	for (int i = 0; i < len_of_padded_mess; i++) {
//		if (i >= original_len) {
//			padded_mess[i] = 0;
//		}
//		else {
//			padded_mess[i] = f_buffer[i];
//		}
//	}
//
//
//	unsigned char* encrypted_mess = new unsigned char[len_of_padded_mess];
//	
//	istringstream hex_chars_stream(key);
//
//
//	key_expansion(expanded_key);
//	for (int i = 0; i < len_of_padded_mess; i += 16) {
//		encrypt(padded_mess + i, key);
//	}
//	//////////////////////////////////////////////////////////
//
//
//	while (src_file_descriptor != EOF) {
//
//
//	}
//
//	const int num_rounds = 9;
//
//	key_expansion(key, expanded_key);
//
//	key_add(buffer, key);
//
//	for (int i = 0; i < num_rounds; i++) {
//		sub_bytes(buffer);
//		shift_rows(buffer);
//		mix_columns(buffer);
//		key_add(buffer, expanded_key+(16*(i+1)));
//	}
//
//	sub_bytes(buffer);
//	shift_rows(buffer);
//	key_add(buffer, expanded_key+160);
//}
//
//string get_dst_filepath(string src_f){
//	return src_f.append(".enc");
//}
//
//void key_expansion_core(unsigned char* in, unsigned char i) {
//	//rotate left
//	unsigned int* q = (unsigned int*)in;
//	*q = (*q >> 8) | ((*q & 0xff) << 24);
//
//	//s_box
//	in[0] = s_box[in[0]];
//	in[1] = s_box[in[1]];
//	in[2] = s_box[in[2]];
//	in[3] = s_box[in[3]];
//
//	//r_con
//	in[0] ^= rcon[i];
//}
//
//void key_expansion(unsigned char* input_key, unsigned char* expanded_key) {
//
//	//first 16 bytes are the original key
//	for (int i = 0; i < 16; i++) {
//		expanded_key[i] = input_key[i];
//	}
//	
//	//Variables
//	int bytes_generated = 16;	//generaated 16 bytes
//	int rcon_iter = 1;			//rcon itteration begin at 1
//	unsigned char temp[4];		//temp storage for core
//
//	while (bytes_generated < 176) {
//		
//		//read 4 bytes for core
//		for (int i = 0; i < 4; i++) {
//			temp[i] = expanded_key[i + bytes_generated - 4];
//		}
//
//		//perform core once for each 16 bytes key
//		if (bytes_generated % 16 == 0) {
//			key_expansion_core(temp, rcon_iter++);
//		}
//
//		//XOR temp with [bytes_generated -16], and store in expanded_key
//		for (unsigned char a = 0; a < 4; a++) {
//			expanded_key[bytes_generated] = expanded_key[bytes_generated - 16] ^ temp[a];
//			bytes_generated++;
//		}
//	}
//}
//
//void sub_bytes(unsigned char* f_buf) {
//	for (int i = 0; i < 16; i++) {
//		f_buf[i] = s_box[f_buf[i]];
//	}
//}
//
//void shift_rows(unsigned char* f_buf) {
//	
//	unsigned char tmp[16];
//	
//	tmp[0] = f_buf[0];
//	tmp[1] = f_buf[5];
//	tmp[2] = f_buf[10];
//	tmp[3] = f_buf[15];
//	
//	tmp[4] = f_buf[4];
//	tmp[5] = f_buf[9];
//	tmp[6] = f_buf[14];
//	tmp[7] = f_buf[3];
//	
//	tmp[8] = f_buf[8];
//	tmp[9] = f_buf[13];
//	tmp[10] = f_buf[2];
//	tmp[11] = f_buf[7];
//	
//	tmp[12] = f_buf[12];
//	tmp[13] = f_buf[1];
//	tmp[14] = f_buf[6];
//	tmp[15] = f_buf[11];
//
//	for (int i = 0; i < 16; i++) {
//		f_buf[i] = tmp[i];
//	}
//}
//
//void mix_columns(unsigned char* f_buf) {
//	unsigned char tmp[16];
//
//	tmp[0] = (unsigned char)(mul_2[f_buf[0]] ^ mul_3[f_buf[1]] ^ f_buf[2] ^ f_buf[3]);
//	tmp[1] = (unsigned char)(f_buf[0] ^ mul_2[f_buf[1]] ^ mul_3[f_buf[2]] ^ f_buf[3]);
//	tmp[2] = (unsigned char)(f_buf[0] ^ f_buf[1] ^ mul_2[f_buf[2]] ^ mul_3[f_buf[3]]);
//	tmp[3] = (unsigned char)(mul_3[f_buf[0]] ^ f_buf[1] ^ f_buf[2] ^ mul_2[f_buf[3]]);
//
//	tmp[4] = (unsigned char)(mul_2[f_buf[4]] ^ mul_3[f_buf[5]] ^ f_buf[6] ^ f_buf[7]);
//	tmp[5] = (unsigned char)(f_buf[4] ^ mul_2[f_buf[5]] ^ mul_3[f_buf[6]] ^ f_buf[7]);
//	tmp[6] = (unsigned char)(f_buf[4] ^ f_buf[5] ^ mul_2[f_buf[6]] ^ mul_3[f_buf[7]]);
//	tmp[7] = (unsigned char)(mul_3[f_buf[4]] ^ f_buf[5] ^ f_buf[6] ^ mul_2[f_buf[7]]);
//
//	tmp[8] = (unsigned char)(mul_2[f_buf[8]] ^ mul_3[f_buf[9]] ^ f_buf[10] ^ f_buf[11]);
//	tmp[9] = (unsigned char)(f_buf[8] ^ mul_2[f_buf[9]] ^ mul_3[f_buf[10]] ^ f_buf[11]);
//	tmp[10] = (unsigned char)(f_buf[8] ^ f_buf[9] ^ mul_2[f_buf[10]] ^ mul_3[f_buf[11]]);
//	tmp[11] = (unsigned char)(mul_3[f_buf[8]] ^ f_buf[9] ^ f_buf[10] ^ mul_2[f_buf[11]]);
//
//	tmp[12] = (unsigned char)(mul_2[f_buf[12]] ^ mul_3[f_buf[13]] ^ f_buf[14] ^ f_buf[15]);
//	tmp[13] = (unsigned char)(f_buf[12] ^ mul_2[f_buf[13]] ^ mul_3[f_buf[14]] ^ f_buf[15]);
//	tmp[14] = (unsigned char)(f_buf[12] ^ f_buf[13] ^ mul_2[f_buf[14]] ^ mul_3[f_buf[15]]);
//	tmp[15] = (unsigned char)(mul_3[f_buf[12]] ^ f_buf[13] ^ f_buf[14] ^ mul_2[f_buf[15]]);
//
//	for (int i = 0; i < 16; i++) {
//		f_buf[i] = tmp[i];
//	}
//}
//
//void key_add(unsigned char* f_buf, unsigned char* key) {
//
//	for (int i = 0; i < 16; i++) {
//		f_buf[i] ^= *key;
//	}
//}
